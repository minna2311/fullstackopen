{"ast":null,"code":"var _jsxFileName = \"C:\\\\temp\\\\unicafe\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Statistics = props => {\n  const all = props.good + props.neutral + props.bad;\n  if (all === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"statistics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No feedback given\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), \"good \", props.good, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 24\n    }, this), \"neutral \", props.neutral, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 30\n    }, this), \"bad \", props.bad, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 22\n    }, this), \"all \", all, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 16\n    }, this), \"average \", (props.good - props.bad) / all, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 43\n    }, this), \"positive \", 100 * props.good / all, \" %\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_c = Statistics;\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: props.handleClick,\n      children: props.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Button;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: setGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setGood(good + 1),\n      children: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setNeutral(neutral + 1),\n      children: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setBad(bad + 1),\n      children: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"Button\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["useState","Statistics","props","all","good","neutral","bad","Button","handleClick","text","App","setGood","setNeutral","setBad"],"sources":["C:/temp/unicafe/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nconst Statistics = (props) => {\n  const all =props.good + props.neutral + props.bad\n\n  if (all === 0) {\n    return (\n      <div>\n        <h1>statistics</h1>\n        <p>No feedback given</p>\n      </div>\n    )\n  }\n  \n  return (\n    <div>\n      <h1>statistics</h1>\n      good {props.good}<br></br>\n      neutral {props.neutral}<br></br>\n      bad {props.bad}<br></br>\n      all {all}<br></br>\n      average {(props.good-props.bad)/all}<br></br>\n      positive {100*props.good/all} %\n    </div>\n  )\n}\n\nconst Button = (props) => { \n  return (\n    <div>\n      <button onClick={props.handleClick}>\n        {props.text}\n      </button>\n    </div>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  \n    return (\n    <div>\n      <h1>give feedback</h1>\n      \n      <Button handleClick={setGood} text=\"good\" />\n      <button onClick={() => setGood(good + 1)}> \n        good\n      </button>\n      <button onClick={() => setNeutral(neutral + 1)}> \n        neutral\n      </button>\n      <button onClick={() => setBad(bad + 1)}> \n        bad\n      </button>\n\n      <Statistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n  \n}\n\nexport default App\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAA;AAEhC,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAC5B,MAAMC,GAAG,GAAED,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACG,OAAO,GAAGH,KAAK,CAACI,GAAG;EAEjD,IAAIH,GAAG,KAAK,CAAC,EAAE;IACb,oBACE;MAAA,wBACE;QAAA,UAAI;MAAU;QAAA;QAAA;QAAA;MAAA,QAAK,eACnB;QAAA,UAAG;MAAiB;QAAA;QAAA;QAAA;MAAA,QAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACpB;EAEV;EAEA,oBACE;IAAA,wBACE;MAAA,UAAI;IAAU;MAAA;MAAA;MAAA;IAAA,QAAK,SACd,EAACD,KAAK,CAACE,IAAI,eAAC;MAAA;MAAA;MAAA;IAAA,QAAS,YAClB,EAACF,KAAK,CAACG,OAAO,eAAC;MAAA;MAAA;MAAA;IAAA,QAAS,QAC5B,EAACH,KAAK,CAACI,GAAG,eAAC;MAAA;MAAA;MAAA;IAAA,QAAS,QACpB,EAACH,GAAG,eAAC;MAAA;MAAA;MAAA;IAAA,QAAS,YACV,EAAC,CAACD,KAAK,CAACE,IAAI,GAACF,KAAK,CAACI,GAAG,IAAEH,GAAG,eAAC;MAAA;MAAA;MAAA;IAAA,QAAS,aACpC,EAAC,GAAG,GAACD,KAAK,CAACE,IAAI,GAACD,GAAG,EAAC,IAC/B;EAAA;IAAA;IAAA;IAAA;EAAA,QAAM;AAEV,CAAC;AAAA,KAvBKF,UAAU;AAyBhB,MAAMM,MAAM,GAAIL,KAAK,IAAK;EACxB,oBACE;IAAA,uBACE;MAAQ,OAAO,EAAEA,KAAK,CAACM,WAAY;MAAA,UAChCN,KAAK,CAACO;IAAI;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAA,MARKF,MAAM;AAUZ,MAAMG,GAAG,GAAG,MAAM;EAAA;EAChB;EACA,MAAM,CAACN,IAAI,EAAEO,OAAO,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACK,OAAO,EAAEO,UAAU,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACM,GAAG,EAAEO,MAAM,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAE/B,oBACA;IAAA,wBACE;MAAA,UAAI;IAAa;MAAA;MAAA;MAAA;IAAA,QAAK,eAEtB,QAAC,MAAM;MAAC,WAAW,EAAEW,OAAQ;MAAC,IAAI,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA,QAAG,eAC5C;MAAQ,OAAO,EAAE,MAAMA,OAAO,CAACP,IAAI,GAAG,CAAC,CAAE;MAAA,UAAC;IAE1C;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAQ,OAAO,EAAE,MAAMQ,UAAU,CAACP,OAAO,GAAG,CAAC,CAAE;MAAA,UAAC;IAEhD;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAQ,OAAO,EAAE,MAAMQ,MAAM,CAACP,GAAG,GAAG,CAAC,CAAE;MAAA,UAAC;IAExC;MAAA;MAAA;MAAA;IAAA,QAAS,eAET,QAAC,UAAU;MAAC,IAAI,EAAEF,IAAK;MAAC,OAAO,EAAEC,OAAQ;MAAC,GAAG,EAAEC;IAAI;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QAClD;AAGV,CAAC;AAAA,GAzBKI,GAAG;AAAA,MAAHA,GAAG;AA2BT,eAAeA,GAAG;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}